<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>along</title>
    <link>https://dragonzhoulong.github.io/</link>
    <description>Recent content on along</description>
    <image>
      <url>https://dragonzhoulong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dragonzhoulong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Nov 2023 16:32:47 +0800</lastBuildDate><atom:link href="https://dragonzhoulong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fuck</title>
      <link>https://dragonzhoulong.github.io/post/fuck/</link>
      <pubDate>Mon, 20 Nov 2023 16:32:47 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/fuck/</guid>
      <description>摆了小十几天,重新抖擞精神一下了
关于mkdocs,因为采用了鹤翔万里的方案可以仅上传code,编译由GitHub actions自动完成(GitHub action是一个很重要的东西,可以配置环境和编译命令,相当于一个服务器了(哈哈))
关于hugo,就比较拉了,只能本地编译后(但是因为用了脚本,也是可以一键运行)
操作系统只差文件系统+磁盘调度+设备管理了 数据结构还有排序+搜索没看,哈哈了,图也忘得差不多了 计网还有一章没看,但是明天七点起床去吃早饭,然后看线代+概率论=&amp;gt;直接开真题了,十天把线代+概率论捡起来,早起失败的原因是睡太迟,今天十一点入睡.</description>
    </item>
    
    <item>
      <title>Some en Words</title>
      <link>https://dragonzhoulong.github.io/post/some-en-words/</link>
      <pubDate>Mon, 13 Mar 2023 21:09:23 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/some-en-words/</guid>
      <description>Hexadecimal(16进制)
decimal(10进制)
octal(8进制)
binary(2进制)</description>
    </item>
    
    <item>
      <title>Xv6 utilities</title>
      <link>https://dragonzhoulong.github.io/post/xv6/</link>
      <pubDate>Sun, 12 Mar 2023 00:20:01 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/xv6/</guid>
      <description>Xv6 Lab: Xv6 and Unix utilities utilitiespingpong pingpong (easy) Write a program that uses UNIX system calls to &amp;lsquo;&amp;lsquo;ping-pong&amp;rsquo;&amp;rsquo; a byte between two processes over a pair of pipes, one for each direction. The parent should send a byte to the child; the child should print &amp;ldquo;: received ping&amp;rdquo;, where is its process ID, write the byte on the pipe to the parent, and exit; the parent should read the byte from the child, print &amp;ldquo;: received pong&amp;rdquo;, and exit.</description>
    </item>
    
    <item>
      <title>Josephus_recursion</title>
      <link>https://dragonzhoulong.github.io/post/think/josephus_recursion/</link>
      <pubDate>Tue, 03 Jan 2023 16:38:54 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/think/josephus_recursion/</guid>
      <description>约瑟夫问题 The Josephus Problem 归纳 第一归纳法 对于有n节的梯子，我们想要从第一节爬到第n节，可以使用如下的方法：
可以爬到第一节 如果可以爬到第k节，那么我们可以爬到第k+1节 现在我们先假设以上两句都成立，这样可以使用递归的方式来爬到第n节楼梯:
首先可以爬到第1节楼梯，然后令k=1，由第二句可知我们可以爬到第2节，再令k=2，则可以爬到第3节。以此类推就可以爬到第n节了.
强归纳法 用感性的语言来描述其实就是,强归纳法的强在于他的假设条件确实很强,同样拿上面第一归纳法的爬来举例,我们的假设 如果是可以爬到任意有限数量的一段楼梯,即$m_0\to m$这些节楼梯,可以推出可以爬到$m+1$节楼梯那么从$m_0$楼梯开始的任意节都是可以爬到的.多么强大的归纳法啊,上来就假设任意有限长度的楼梯都是可以爬到的,只要推到出来下一节是可以爬到的就可以完成归纳,其实简单的来看如果假设仅一节楼梯是可以爬到的,那么不就退化到来第一归纳法的形式了嘛?这样看来强归纳法的强确实很强. 那么怎么从第一归纳法推导出强归纳法来呢?
Exercise 2.2.5. Prove Proposition 2.2.14.1
Proposition 2.2.14 (Strong principle of induction). Let $m_0$ be a natural number, and let $P(m)$ be a property pertaining to an arbitrary natural number $m$. Suppose that for each $m \geq m_0$, we have the following implication: if $P\left(m^{\prime}\right)$ is true for all natural numbers $m_0 \leq m^{\prime}&amp;lt;m$, then $P(m)$ is also true.</description>
    </item>
    
    <item>
      <title>emos</title>
      <link>https://dragonzhoulong.github.io/post/emotion/emos/</link>
      <pubDate>Wed, 19 Oct 2022 17:22:47 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/emotion/emos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eletronic</title>
      <link>https://dragonzhoulong.github.io/post/eletronic/</link>
      <pubDate>Tue, 18 Oct 2022 22:27:53 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/eletronic/</guid>
      <description>模电有很多近似,根据频率等条件来取舍.
关于BJT 发射极电流: 由于 $\mathrm{B}-\mathrm{E}$ 结为正向偏置, 所以希望通过此结的电流为 $\mathrm{B}-\mathrm{E}$ 之间电压的指 数函数, 正如以前所看到的通过 PN 结的电流是二极管正向偏置电压的指数函数.则可以 写出发射极的电流为 $$ i_E=I_{E O}\left(\mathrm{e}^{v_{B E} / V_T}-1\right) \approx I_{E O} \mathrm{e}^{v_{B E} / v_T} $$ 式中,忽略了$(-1)$项所得的近似值在通常情况下是正确的,因为在很多情况下都有 $v_{B E}\gg{V_T}$发射系数 $n$ 和 $V_T$ 相乘的值为1.带负电荷的电子流通过发射极流人到基极,和电流方向相反. BJT的特性就是这样,$i_E,i_C,i_B$都是仅和$v_{BE}$呈指数关系,$i_E$作为emitter,发射极电流自然是最大的,$i_C$和$i_B$都是依赖发射极电流来产生
在Hugo博客中添加行内和行间Latex语法支持的方法 this the tutorial戴维南电路和诺顿电路等效 高频小信号放大器 混合$\pi$模型与混合$h$模型 混合h模型 纯纯的建模嗯求关系,偏导数的概念+然后就是什么跨导之类的概念. $$ \begin{aligned} &amp;amp;\dot{I}_1=y_i \dot{V}_1+y_r \dot{V}_2 \newline &amp;amp;\dot{I}_2=y_f \dot{V}_1+y_o \dot{V}_2 \end{aligned} $$
i=&amp;gt; input r=&amp;gt; reverse f=&amp;gt; forward o=&amp;gt; output
核心要点在于 $r_{b^{&amp;rsquo;}b}$通常只有十几同式子中的电容等产生的电抗相比太小了可以当作短路,以及$V_{be}$的含金量.</description>
    </item>
    
    <item>
      <title>SocialNetwork</title>
      <link>https://dragonzhoulong.github.io/post/socialnetwork/</link>
      <pubDate>Sun, 16 Oct 2022 00:33:13 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/socialnetwork/</guid>
      <description>SocialNetwork Goal and Work Hard idea is cheap int main(){ std::cout&amp;lt;&amp;lt;&amp;quot;piece of shit&amp;quot;;//fuckyafuihqlwfiluqfhqwliufehqwihfwqufhiwqlfhwq //把网页端的字体换成了最爱的等宽中英文，世界仿佛都变得平静 } Git submodule 经常碰到这种情况：当你在一个Git 项目上工作时，你需要在其中使用另外一个Git 项目。也许它是一个第三方开发的Git 库或者是你独立开发和并在多个父项目中使用的。这个情况下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。
在Git 中你可以用子模块submodule来管理这些项目，submodule允许你将一个Git 仓库当作另外一个Git 仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。
git add . 将当前仓库所有文件提交至stage(暂存区),如果你处于当前仓库的某个文件夹内一样会将上一级目录的一切提交至暂存区. git commit -m &amp;ldquo;some words&amp;rdquo; 将暂存区的文件提交. git push origin master 将当前提交的文件push到云端 有时候需要添加 -f 强制推送至远端 覆盖掉远端的库 当远端的库有些文件你没有的时候你push会出现error git pull origin master 将云端的同步到本地.
添加子模块 将本地部署到GitHub 本地同步到Github 本地的图片怎样同步到Github CDN怎样加速图片 最终的效果就是云端访问笔记网站无障碍，本地记录笔记贴图方便流程透明 KMP knuth-Morris-Pratt字符串查找算法，给定一段长度为N的文本和一个长度为M的模式(Pattem)字符串,在文中找到一个和该模式相符的子字符串.
about</description>
    </item>
    
    <item>
      <title>Mymine</title>
      <link>https://dragonzhoulong.github.io/post/mymine/</link>
      <pubDate>Sat, 09 Jul 2022 12:32:57 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/mymine/</guid>
      <description>Chapter Ⅰ 多年以后，奥雷连诺上校站在行刑队面前，准会想起父亲带他去参观冰块的那个遥远的下午。当时，马孔多是个二十户人家的村庄，一座座土房都盖在河岸上，河水清澈，沿着遍布石头的河床流去，河里的石头光滑、洁白，活象史前的巨蛋。这块天地还是新开辟的，许多东西都叫不出名字，不得不用手指指点点。
每年三月，衣衫褴楼的吉卜赛人都要在村边搭起帐篷，在笛鼓的喧嚣声中，向马孔多的居民介绍科学家的最新发明。他们首先带来的是磁铁。一个身躯高大的吉卜赛人，自称梅尔加德斯，满脸络腮胡子，手指瘦得象鸟的爪子，向观众出色地表演了他所谓的马其顿炼金术士创造的世界 第八奇迹。他手里拿着两大块磁铁，从一座农舍走到另一座农舍，大家都惊异地看见，铁锅、铁盆、铁钳、铁炉都从原地倒下，木板上的钉子和螺丝嘎吱嘎吱地拼命想挣脱出来，甚至那些早就丢失的东西也从找过多次的地方兀然出现，乱七八糟地跟在梅尔加德斯的魔铁后面“东西也是有生命的，”吉卜赛人用刺耳的声调说，“只消唤起它们的灵性。”霍·阿·布恩蒂亚狂热的想象力经常超过大自然的创造力，甚至越过奇迹和魔力的限度，他认为这种暂时无用的科学发明可以用来开采地下的金子。
System call Description int fork() Create a process, return child&amp;rsquo;s PID. int exit(int status) Terminate the current process; status reported to wait(). No return. int wait(int *status) Wait for a child to exit; exit status in *status; returns child PID. int kill(int pid) Terminate process PID. Returns 0 , or -1 for error. int getpid() Return the current process&amp;rsquo;s PID. int sleep(int n) Pause for n clock ticks.</description>
    </item>
    
    <item>
      <title>Myfirst</title>
      <link>https://dragonzhoulong.github.io/post/myfirst/</link>
      <pubDate>Sat, 09 Jul 2022 01:14:22 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/myfirst/</guid>
      <description>关于PaperMod与Hugo PaperMod主题非常的简洁有一种纸质的质朴,看起来感觉很舒服.
目前已经掌握的情报 目前已经进行的修改有 更改了主题默认的字体 =&amp;gt; &amp;ldquo;CaskaydiaCove Nerd Font&amp;rdquo; ,&amp;ldquo;更纱黑体&amp;rdquo; 但是本地没有这俩字体指定是显示成其他的字体了,好像有一种解决方案是将这些字体进行CDN加速啥的,具体实现是让这俩字体在一个GitHub仓库里然后在配置文件里填入两行链接啥的.准备在以后给仓库图片做加速的时候再说吧.目前觉得没必要搞太多的图片啥的,不方便管理能用文本尽量用文本吧.
Hugo博客目录修改至侧边 评论功能和浏览访问啥的算了吧,闲得慌真的是. 为什么不能只用中文的字符和英文的逗号句号,感觉 需求 分类需要执行什么操作? 大概要分出来哪些类 记得记录好博客搭建中遇到的教程 关于分类的详细知识 分类的定义 Hugo包含对用户定义的内容分类-taxonomies 标签的支持. 标签是对内容逻辑关系的分类.
定义 Definitions 标签 Taxonomy 可以被用来对内容分类的类型 条目 Term 分类中的键 值 Value 赋值某条目的一条内容 分类举例: 电影网站 我们假设在建的是关于电影的网站。您可能想包括如下分类:
Actors 演员 Directors 导演 Studios 工作室 Genre 电影类型 Year 年份 Awards 获奖 然后, 对每个电影, 需要声明这些分类的条目(比如，在每个电影内容文件的front matter部分)。对于这些条目，Hugo自动为每个演员、导演、工作室、电影类型、年份和获奖情况创建对应页面，每个页面包含属于特定演员、导演、工作室、电影类型、年份或获奖情况的电影的列表。
Hugo怎么分类 Hugo怎么新建文件 //直接使用命令的效果 $ hugo new about.md 新创建的about.md在目录content/里
新建的文件是在哪里呢？ $ hugo new post/xxx.md 新创建的xxx.md就在content/post/里 $$
$$</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://dragonzhoulong.github.io/post/about/</link>
      <pubDate>Sat, 09 Jul 2022 01:14:11 +0800</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/about/</guid>
      <description>who am i who are you and then? cadwa</description>
    </item>
    
    <item>
      <title>csapp bomb lab</title>
      <link>https://dragonzhoulong.github.io/post/bomblab/</link>
      <pubDate>Wed, 03 Nov 2021 15:29:18 +0000</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/bomblab/</guid>
      <description>Lab2 bomb GDB手册 Enscript Output (cmu.edu)1
1.单步执行和跟踪函数调用 #include &amp;lt;stdio.h&amp;gt; int add_range(int low, int high) { int i, sum; for (i = low; i &amp;lt;= high; i++) sum = sum + i; return sum; } int main(void) { int result[100]; result[0] = add_range(1, 10); result[1] = add_range(1, 100); printf(&amp;quot;result[0]=%d\nresult[1]=%d\n&amp;quot;, result[0], result[1]); return 0; } result[0]=55 result[1]=5105 第二个有问题，因为sum未初始化，用的是第一次调用的寄存器
gcc -g main.c -o main gdb main -g选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调试时必须保证gdb能找到源文件。gdb提供一个类似Shell的命令行环境，上面的(gdb)就是提示符，在这个提示符下输入help可以查看命令的类别
看bomb.pdf chapter Ⅲ 3.2 程序编码 gcc -Og -o p p1.</description>
    </item>
    
    <item>
      <title>CSAPP_lab1_data</title>
      <link>https://dragonzhoulong.github.io/post/datalab/</link>
      <pubDate>Wed, 03 Nov 2021 15:29:18 +0000</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/datalab/</guid>
      <description>CSAPP_Lab0_环境配置 Docker 让你省去配置环境的烦恼 搜索 CSAPP:什么：环境配置竟然这么简单
WSL2 也很方便，省去了找Docker镜像，Vscode配置到本地端口等麻烦
前置知识 逻辑移动 Logic Shift 如图，一个字节的数据向右移动一位，空出来的位用0填充
11001111逻辑右移一位，最低位进入进位标识位
算术移动 arithmetic shift 11001111，符号位为1，算术右移一位后得到11100111：
​ SHL SHL（左移）指令使目的操作数逻辑左移一位，最低位用 0 填充。最高位移入进位标志位，而进位标志位中原来的数值被丢弃：
若将 1100 1111 左移 1 位，该数就变为 1001 1110：
SHL 的第一个操作数是目的操作数，第二个操作数是移位次数：
SHL destination,count
该指令可用的操作数类型如下所示：
SHL reg, imm8 SHL mem, imm8 SHL reg, CL SHL mem, CL
x86 处理器允许 imm8 为 0〜255 中的任何整数。另外，CL 寄存器包含的是移位计数。上述格式同样适用于 SHR、SAL、SAR、ROR、ROL、RCR 和 RCL 指令。
[示例]下列指令中，BL 左移一位。最高位复制到进位标志位，最低位填充 0：
mov b1, 8Fh ; BL = 10001111b shl bl, 1 ; CF = 1, BL = 00011110b</description>
    </item>
    
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>汇编 on along</title>
    <link>https://dragonzhoulong.github.io/tags/%E6%B1%87%E7%BC%96/</link>
    <description>Recent content in 汇编 on along</description>
    <image>
      <url>https://dragonzhoulong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dragonzhoulong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Nov 2021 15:29:18 +0000</lastBuildDate><atom:link href="https://dragonzhoulong.github.io/tags/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>csapp bomb lab</title>
      <link>https://dragonzhoulong.github.io/post/bomblab/</link>
      <pubDate>Wed, 03 Nov 2021 15:29:18 +0000</pubDate>
      
      <guid>https://dragonzhoulong.github.io/post/bomblab/</guid>
      <description>Lab2 bomb GDB手册 Enscript Output (cmu.edu)1
1.单步执行和跟踪函数调用 #include &amp;lt;stdio.h&amp;gt; int add_range(int low, int high) { int i, sum; for (i = low; i &amp;lt;= high; i++) sum = sum + i; return sum; } int main(void) { int result[100]; result[0] = add_range(1, 10); result[1] = add_range(1, 100); printf(&amp;quot;result[0]=%d\nresult[1]=%d\n&amp;quot;, result[0], result[1]); return 0; } result[0]=55 result[1]=5105 第二个有问题，因为sum未初始化，用的是第一次调用的寄存器
gcc -g main.c -o main gdb main -g选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调试时必须保证gdb能找到源文件。gdb提供一个类似Shell的命令行环境，上面的(gdb)就是提示符，在这个提示符下输入help可以查看命令的类别
看bomb.pdf chapter Ⅲ 3.2 程序编码 gcc -Og -o p p1.</description>
    </item>
    
  </channel>
</rss>
